{"name":"Seqdiag gui","tagline":"A graphic user interface to Takeshi Komiya's simple sequence diagram package","body":"# seqdiag_gui user guide\r\n\r\n\r\nseqdiag_gui is a graphic user interface to Takeshi Komiya's simple sequence\r\ndiagram package, called [seqdiag](https://bitbucket.org/tk0miya/seqdiag).\r\n\r\n## Install\r\n\r\nThis package needs the following dependencies installed on your system:\r\n\r\n  - python >= 2.7.2\r\n  - wxPython >= 2.9.3.1\r\n\r\nIf you are on OS X, you can install these packages via Macports:\r\n\r\n```console\r\n  $ sudo port install python27 @2.7.2_4+universal\r\n  $ sudo port install py27-wxpython-devel @2.9.3.1_0\r\n```\r\n\r\nThis project has been tested on a system running OS X 10.8.2\r\n\r\n## Setup\r\n\r\nIn order to run this project, you need to build it using the following\r\ncommands:\r\n\r\n```console\r\n  $ python bootstrap.py\r\n  $ bin/buildout\r\n```\r\n\r\nAfter the build is successfully completed, you may start the graphical user\r\ninterface with the following command:\r\n\r\n```console\r\n  $ bin/run\r\n```\r\n\r\n## Create a diagram\r\n\r\nLet us start from a clear screen by removing all text in the edition box:\r\n\r\n![Step 01: cleared up](http://logc.github.com/seqdiag_gui/images/screen-01.png)\r\n\r\nWe can add a message between two entities by writing their names, an arrow that goes from one to the other, and a semicolon at the end of the described message. If the entities were not mentioned yet in the diagram, they are created new. Here we create two of them, 'user'  and 'interface'. We then press the 'Evaluate' button to show the following diagram:\r\n\r\n![Step 02: first message](http://logc.github.com/seqdiag_gui/images/screen-02.png)\r\n\r\nA return value is signaled in the diagram by an arrow flowing back from one entity to another. This is written in the edition box simply inverting the arrow in a line following the first one:\r\n\r\n![Step 03: return value](http://logc.github.com/seqdiag_gui/images/screen-03.png)\r\n\r\nIf the second entity needed to call other entities to compute the return value, these messages must be listed between the original call and the return value call. Here we create a third entity ('handler') and send it a message. We obtain a return value in the same line by writing a double arrow in the edition box.\r\n\r\n![Step 04: nested calls](http://logc.github.com/seqdiag_gui/images/screen-04.png)\r\n\r\nWhen you finish describing the flow of messages that make up your sequence, you can save the resulting diagram in a PNG file by pressing the 'Save' button.\r\n\r\nThere are many more features in the seqdiag package. You can read up on them in [its documentation](http://blockdiag.com/en/seqdiag/index.html) and end up producing something like this!\r\n\r\n![Step 05: complex diagram](http://logc.github.com/seqdiag_gui/images/screen-05.png)\r\n\r\n## Un-install\r\n\r\nYou may uninstall the application by simply removing the folder where it was installed. No external files remain.\r\n\r\n## LICENSE\r\n\r\nThis program is licensed under the GPL license, v3.0. You can read all of its Terms and conditions [here](http://www.gnu.org/licenses/gpl.html).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}